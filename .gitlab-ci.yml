default:
  image:
    # use node image instead of our own
    # our image runs with user node
    # see: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2750
    name: node:16.20.0-alpine3.17
  # Cache modules in between jobs
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - uname -a
    - node --version
    - npm --version
    # Install dependencies and cache within the project directory to cache
    # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
    - npm ci --include dev --cache .npm --prefer-offline
    # Set up config files (currently no actual values are needed)
    - cp listener/config_template.json listener/config.json
    # TODO: If required, setup .env file in pipeline using gitlab project settings vars or by setting variables directly here.


stages:
  - Build
  - Static Analysis
  - Test
  - Documentation
  - Deploy


.default_needs:
  needs:
    - job: build image

build image:
  stage: Build
  # disable the default cache
  cache: []
  image: docker:23.0.6
  services:
    - docker:23.0.6-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    # login to CI registry: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#option-1-run-docker-login
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - export IMAGE_REPOSITORY=$CI_REGISTRY_IMAGE
    # create an image tagged with the branch or tag name
    - export IMAGE_BRANCH=$IMAGE_REPOSITORY:$CI_COMMIT_REF_SLUG
    # plus for the default branch create a latest and commit tag
    # the commit tag allows us to get images of previous commits in case of problems
    - export IMAGE_LATEST=$IMAGE_REPOSITORY:latest
    - export IMAGE_COMMIT=$IMAGE_REPOSITORY:$CI_COMMIT_SHA
    # make use of the Docker cache to speed up building
    # see: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#make-docker-in-docker-builds-faster-with-docker-layer-caching
    - docker pull $IMAGE_LATEST || true
    - docker pull $IMAGE_BRANCH || true
    - docker build --cache-from $IMAGE_BRANCH --cache-from $IMAGE_LATEST --tag $IMAGE_BRANCH --tag $IMAGE_LATEST --tag $IMAGE_COMMIT .
    - docker push $IMAGE_BRANCH
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        echo "Running on default branch. Pushing latest and commit tags..."
        docker push $IMAGE_LATEST
        docker push $IMAGE_COMMIT
      fi


eslint:
  stage: Static Analysis
  script:
    - npm install eslint-formatter-gitlab --no-save
    - npx eslint --version
    - npx eslint --format gitlab src/**/*.js
  artifacts:
    when: always
    reports:
      codequality: gl-codequality.json

mocha:
  stage: Test
  script:
    - npm install mocha-junit-reporter --no-save
    - npx mocha --version
    - npx mocha --reporter mocha-junit-reporter --reporter-options mochaFile=junit.xml './src/**/*.test.*' './listener/**/*.test.*' './legacy-registration/**/*.test.*'
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml

coverage:
  stage: Test
  needs:
    - job: mocha
  script:
    - npx nyc --version
    # record coverage across complete codebase to show progress over time
    - npx nyc --all --reporter cobertura mocha './src/**/*.test.*' './listener/**/*.test.*' './legacy-registration/**/*.test.*'
    - npx nyc report
  # see: https://docs.gitlab.com/ee/ci/pipelines/settings.html#test-coverage-examples
  # Extract branch coverage instead of statement coverage
  coverage: '/^All files[^|]*\|[^|]*\|\s+\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

build docs:
  stage: Documentation
  script:
    - npx jsdoc --version
    - npm run docs

pages:
  stage: Deploy
  script:
    - npx jsdoc --version
    - npm run docs
    - mv docs/generated/ public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

# Deployment implicitly uses a service account assigned to $GOOGLE_APPLICATION_CREDENTIALS below (from values defined in the GitLab project settings)
# These service accounts provide permissions for editing Firebase rules
.firebase rules:
  stage: Deploy
  before_script:
    - npm install -g firebase-tools

firebase rules dev:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/dev/database.rules.json
  script:
    - cd firebase/dev
    - export GOOGLE_APPLICATION_CREDENTIALS=$DEV_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules staging:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - firebase/staging/database.rules.json
  script:
    - cd firebase/staging
    - export GOOGLE_APPLICATION_CREDENTIALS=$STAGING_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules preprod:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == "PreProd"
      changes:
        - firebase/preprod/database.rules.json
  script:
    - cd firebase/preprod
    - export GOOGLE_APPLICATION_CREDENTIALS=$PREPROD_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database
