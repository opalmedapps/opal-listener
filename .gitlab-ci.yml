default:
  image: node:16.14.2-alpine3.15

# Cache modules in between jobs
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/

before_script:
  - uname -a
  - node --version
  - npm --version
  # Install dependencies and cache within the project directory to cache
  # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
  - npm ci --cache .npm --prefer-offline
  # Set up config files (currently no actual values are needed)
  - cp listener/config_template.json listener/config.json
  - cp src/config/config.template.json src/config/config.json

stages:
  - Development Test
  - Static Analysis
  - Test
  - Documentation
  - Deploy

eslint:
  stage: Static Analysis
  script:
    - npm install eslint-formatter-gitlab --no-save
    - npx eslint --version
    - npx eslint --format gitlab src/**/*.js
  artifacts:
    when: always
    reports:
      codequality: gl-codequality.json

mocha:
  stage: Test
  script:
    - npm install mocha-junit-reporter --no-save
    - npx mocha --version
    - npx mocha --reporter mocha-junit-reporter --reporter-options mochaFile=junit.xml './src/**/*.test.*' './listener/**/*.test.*'
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml

coverage:
  stage: Test
  needs:
    - job: mocha
  script:
    - npx nyc --version
    # record coverage across complete codebase to show progress over time
    - npx nyc --all --reporter cobertura mocha './src/**/*.test.*' './listener/**/*.test.*'
    - npx nyc report
  # see: https://docs.gitlab.com/ee/ci/pipelines/settings.html#test-coverage-examples
  # Extract branch coverage instead of statement coverage
  coverage: '/^All files[^|]*\|[^|]*\|\s+\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

build docs:
  stage: Documentation
  script:
    - npx jsdoc --version
    - npm run docs

pages:
  stage: Deploy
  script:
    - npx jsdoc --version
    - npm run docs
    - mv docs/generated/ public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

# Deployment implicitly uses a service account assigned to $GOOGLE_APPLICATION_CREDENTIALS below
# These service accounts provide permissions for editing Firebase rules.
.firebase rules:
  stage: Development Test
  before_script:
    - npm install -g firebase-tools

firebase rules dev:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == "QSCCD-465.SB.firebase-rules"
      changes:
        - firebase/dev/database.rules.json
  script:
    - cd firebase/dev
    - GOOGLE_APPLICATION_CREDENTIALS = $DEV_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules staging:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - firebase/staging/database.rules.json
  script:
    - cd firebase/staging
    - GOOGLE_APPLICATION_CREDENTIALS = $STAGING_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules preprod:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == "PreProd"
      changes:
        - firebase/preprod/database.rules.json
  script:
    - cd firebase/preprod
    - GOOGLE_APPLICATION_CREDENTIALS = $PREPROD_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database
