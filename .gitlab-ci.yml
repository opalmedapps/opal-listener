# SPDX-FileCopyrightText: Copyright 2022 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

default:
  image:
    # use node image instead of our own
    # our image runs with user node
    # see: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2750
    name: node:22.13.0-alpine3.21
  # Cache modules in between jobs
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - uname -a


stages:
  - Build
  - Static Analysis
  - test
  - Documentation
  - Deploy


.default_needs:
  needs:
    - job: build image

.default_before:
  before_script:
    - node --version
    - npm --version
    # Install dependencies and cache within the project directory to cache
    # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
    - npm ci --include dev --cache .npm --prefer-offline
    # Set up env files
    - cp .env.sample .env

build image:
  stage: Build
  # disable the default cache
  cache: []
  image: docker:27.4.1
  services:
    - docker:27.4.1-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    # login to CI registry: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#option-1-run-docker-login
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker build --check .
    - export IMAGE_REPOSITORY=$CI_REGISTRY_IMAGE
    # create an image tagged with the branch or tag name
    - export IMAGE_BRANCH=$IMAGE_REPOSITORY:$CI_COMMIT_REF_SLUG
    # plus for the default branch create a latest and commit tag
    # the commit tag allows us to get images of previous commits in case of problems
    - export IMAGE_LATEST=$IMAGE_REPOSITORY:latest
    - export IMAGE_COMMIT=$IMAGE_REPOSITORY:$CI_COMMIT_SHA
    # make use of the Docker cache to speed up building
    # see: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#make-docker-in-docker-builds-faster-with-docker-layer-caching
    - docker pull $IMAGE_LATEST || true
    - docker pull $IMAGE_BRANCH || true
    - docker build --cache-from $IMAGE_BRANCH --cache-from $IMAGE_LATEST --tag $IMAGE_BRANCH --tag $IMAGE_LATEST --tag $IMAGE_COMMIT .
    - docker push $IMAGE_BRANCH
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        echo "Running on default branch. Pushing latest and commit tags..."
        docker push $IMAGE_LATEST
        docker push $IMAGE_COMMIT
      fi


eslint:
  stage: Static Analysis
  extends: .default_before
  script:
    - npm install eslint-formatter-gitlab --no-save
    - npx eslint --version
    - npx eslint --format gitlab src/**/*.js
  artifacts:
    when: always
    reports:
      codequality: gl-codequality.json

mocha:
  stage: test
  extends: .default_before
  script:
    - npm install mocha-junit-reporter --no-save
    - npx mocha --version
    - npx mocha --reporter mocha-junit-reporter --reporter-options mochaFile=junit.xml './src/**/*.test.*' './listener/**/*.test.*' './legacy-registration/**/*.test.*'
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml

coverage:
  stage: test
  extends: .default_before
  needs:
    - job: mocha
  script:
    - npx nyc --version
    # record coverage across complete codebase to show progress over time
    - npx nyc --all --reporter cobertura mocha './src/**/*.test.*' './listener/**/*.test.*' './legacy-registration/**/*.test.*'
    - npx nyc report
  # see: https://docs.gitlab.com/ee/ci/pipelines/settings.html#test-coverage-examples
  # Extract branch coverage instead of statement coverage
  coverage: '/^All files[^|]*\|[^|]*\|\s+\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

reuse:
  stage: test
  image: ghcr.io/astral-sh/uv:0.5.24-python3.13-alpine
  # prevent artifacts from other jobs from polluting the working directory
  cache: []
  script:
    - uv pip install --system reuse
    - reuse lint

build docs:
  stage: Documentation
  extends: .default_before
  script:
    - npx jsdoc --version
    - npm run docs

pages:
  stage: Deploy
  extends: .default_before
  script:
    - npx jsdoc --version
    - npm run docs
    - mv docs/generated/ public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

# Deployment implicitly uses a service account assigned to $GOOGLE_APPLICATION_CREDENTIALS below (from values defined in the GitLab project settings)
# These service accounts provide permissions for editing Firebase rules
# For details on 'changes' and 'allow_failure' in the child jobs, see: https://docs.gitlab.com/ee/ci/yaml/#ruleschanges
.firebase rules:
  stage: Deploy
  before_script:
    - npm install -g firebase-tools

firebase rules demo:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/demo/database.rules.json
  environment:
    name: demo
  script:
    - cd firebase/demo
    - export GOOGLE_APPLICATION_CREDENTIALS=$DEMO_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules dev:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/dev/database.rules.json
  environment:
    name: dev
  script:
    - cd firebase/dev
    - export GOOGLE_APPLICATION_CREDENTIALS=$DEV_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules devops:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/devops/database.rules.json
  environment:
    name: devops
  script:
    - cd firebase/devops
    - export GOOGLE_APPLICATION_CREDENTIALS=$DEVOPS_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules preprod:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/preprod/database.rules.json
      when: manual
      # Allow pipeline to continue without running this job
      allow_failure: true
  environment:
    name: preprod
  script:
    - cd firebase/preprod
    - export GOOGLE_APPLICATION_CREDENTIALS=$PREPROD_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules qa:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/qa/database.rules.json
      when: manual
      # Allow pipeline to continue without running this job
      allow_failure: true
  environment:
    name: qa
  script:
    - cd firebase/qa
    - export GOOGLE_APPLICATION_CREDENTIALS=$QA_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

firebase rules staging:
  extends: .firebase rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - firebase/staging/database.rules.json
      when: manual
      # Allow pipeline to continue without running this job
      allow_failure: true
  environment:
    name: staging
  script:
    - cd firebase/staging
    - export GOOGLE_APPLICATION_CREDENTIALS=$STAGING_GOOGLE_APPLICATION_CREDENTIALS
    - firebase deploy --only database

include:
  - component: $CI_SERVER_FQDN/opalmedapps/engineering/ci-templates/check-thirdparty-notice@main
    inputs:
      package-file: package.json
  # run pipelines for default branch, tags, and all types of merge request pipelines
  # to support merge trains
  # see: https://docs.gitlab.com/ee/ci/pipelines/merge_trains.html#enable-merge-trains
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'
  # use latest template versions to run security scanning jobs also in merge request pipelines:
  # https://docs.gitlab.com/ee/user/application_security/index.html#use-security-scanning-tools-with-merge-request-pipelines
  # Secret Detection: https://docs.gitlab.com/ee/user/application_security/secret_detection/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  # Dependency Scanning: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  # Container Scanning: https://docs.gitlab.com/ee/user/application_security/container_scanning/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Container-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.latest.gitlab-ci.yml
  # SAST Scanning: https://docs.gitlab.com/ee/user/application_security/sast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml

# Customizations
#

# Container Scanning
# https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
container_scanning:
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

# Secret Detection
# https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/index.html#overriding-the-analyzer-jobs
secret_detection:
  # Prevent default access to artifacts from previous stages, to avoid scanning for secrets in the npm cache (.npm)
  needs: []

# SAST
# https://docs.gitlab.com/ee/user/application_security/sast/#available-cicd-variables
sast:
  variables:
    # exclude test files
    # https://docs.gitlab.com/ee/user/application_security/sast/#vulnerability-filters
    SAST_EXCLUDED_PATHS: "spec, test, tests, tmp, *.test.js"
